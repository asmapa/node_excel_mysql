const XLSX = require('xlsx');
const mysql = require('mysql');

// create a connection pool to the MySQL database
const pool = mysql.createPool({
  connectionLimit: 10,
  host: 'localhost',
  user: 'username',
  password: 'password',
  database: 'database_name'
});

// read the Excel file
const workbook = XLSX.readFile('results.xlsx');

// select the first worksheet
const worksheet = workbook.Sheets[workbook.SheetNames[0]];

// convert the worksheet to an array of objects
const data = XLSX.utils.sheet_to_json(worksheet);

// loop through the data and insert each row into the database
data.forEach((row) => {
  // calculate the cgpa and sgpa
  const cgpa = calculateCGPA(row);
  const sgpa = calculateSGPA(row);

  // calculate pass/fail status
  const status = calculateStatus(row);

  // build the SQL query and parameters
  const sql = `INSERT INTO student_results (name, roll_number, marks, cgpa, sgpa, status) VALUES (?, ?, ?, ?, ?, ?)`;
  const params = [row.name, row.roll_number, row.marks, cgpa, sgpa, status];

  // get a connection from the pool and execute the query
  pool.getConnection((err, connection) => {
    if (err) {
      console.error('Error getting connection from pool:', err);
      return;
    }

    connection.query(sql, params, (err, result) => {
      // release the connection back to the pool
      connection.release();

      if (err) {
        console.error('Error inserting row into database:', err);
        return;
      }

      console.log('Row inserted into database');
    });
  });
});

// function to calculate CGPA
function calculateCGPA(row) {
  const grades = row.grades.split(",");
  let totalGradePoints = 0;
  let totalCredits = 0;
  for (let i = 0; i < grades.length; i++) {
    const grade = grades[i];
    const credit = Number(row.credits[i]);
    totalCredits += credit;
    totalGradePoints += calculateGradePoints(grade) * credit;
  }
  return totalGradePoints / totalCredits;
}

// function to calculate SGPA
function calculateSGPA(row) {
  const gradePoints = row.grades.split(",").map((grade) => calculateGradePoints(grade));
  const credits = row.credits.map(Number);
  const totalGradePoints = gradePoints.reduce((sum, gradePoint, index) => sum + gradePoint * credits[index], 0);
  const totalCredits = credits.reduce((sum, credit) => sum + credit, 0);
  return totalGradePoints / totalCredits;
}

// function to calculate pass/fail status
function calculateStatus(row) {
  // TODO: implement the calculation logic
  return 'pass';
}

// helper function to calculate grade points
function calculateGradePoints(grade) {
  switch (grade) {
    case "O":
      return 10;
    case "A+":
      return 9;
    case "A":
      return 8;
    case "B+":
      return 7;
    case "B":
      return 6;
    case "C":
      return 5;
    case "P":
      return 4;
    default:
      return 0;
  }
}

